{"id":689981360,"lang":"python3","time":"1 month, 1 week","timestamp":1651286593,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/689981360/","is_pending":"Not Pending","title":"Diameter of Binary Tree","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def max_height(self, source):\n        if not source:\n            return 0\n        max_depth = 0\n        stack = [(source, 1)]\n        while len(stack) != 0:\n            (v, depth) = stack.pop()\n            max_depth = max(max_depth, depth)\n            if v.left:\n                stack.append((v.left, depth+1))\n            if v.right:\n                stack.append((v.right, depth+1))\n        return max_depth\n    \n    def diameterOfBinaryTree(self, root: Optional[TreeNode]) -> int:\n        if not root:\n            return 0\n        lh = self.max_height(root.left)\n        rh = self.max_height(root.right)\n        \n        dl = self.diameterOfBinaryTree(root.left)\n        dr = self.diameterOfBinaryTree(root.right)\n        return max(lh+rh+1, max(dl, dr))-1","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110001011","title_slug":"diameter-of-binary-tree"}