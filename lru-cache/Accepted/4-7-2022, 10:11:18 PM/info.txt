{"id":676080554,"lang":"python3","time":"1 month, 4 weeks","timestamp":1649383878,"status_display":"Accepted","runtime":"831 ms","url":"/submissions/detail/676080554/","is_pending":"Not Pending","title":"LRU Cache","memory":"75.3 MB","code":"class LRUCache:\n\n    def __init__(self, capacity: int):\n        self.cap = capacity\n        from collections import OrderedDict\n        self.cache = OrderedDict()\n\n    def get(self, key: int) -> int:\n        if key in self.cache:\n            self.cache.move_to_end(key)\n            return self.cache[key]\n        else:\n            return -1\n\n    def put(self, key: int, value: int) -> None:\n        self.cache[key] = value\n        self.cache.move_to_end(key)\n        if len(self.cache) > self.cap:\n                self.cache.popitem(last=False)\n\n\n# Your LRUCache object will be instantiated and called as such:\n# obj = LRUCache(capacity)\n# param_1 = obj.get(key)\n# obj.put(key,value)","compare_result":"1111111111111111111111","title_slug":"lru-cache"}