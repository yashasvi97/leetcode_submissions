{"id":677835179,"lang":"python3","time":"1Â month, 3Â weeks","timestamp":1649619093,"status_display":"Accepted","runtime":"89 ms","url":"/submissions/detail/677835179/","is_pending":"Not Pending","title":"Search in Rotated Sorted Array","memory":"14.4 MB","code":"class Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        def binarySearchK(arr, l, r):\n            while l <= r:\n                mid = l + (r - l) // 2\n                if mid != 0 and arr[mid-1] > arr[mid]:\n                    return mid\n                else:\n                    #print(mid, r)\n                    if arr[mid] > arr[r]:\n                        l = mid + 1\n                    else:\n                        r = mid - 1\n            return -1        \n        def binarySearch(arr, l, r, x):\n            while l <= r:\n                mid = l + (r - l) // 2\n                #print(mid)\n                if arr[mid] == x:\n                    return mid\n                if x > arr[mid]:\n                    l = mid+1\n                else:\n                    r = mid-1\n            return -1\n        k = binarySearchK(nums, 0, len(nums)-1)\n        if k == -1:\n            return binarySearch(nums, 0, len(nums)-1, target)\n        else:\n            if target >= nums[0]:\n                return binarySearch(nums, 0, k-1, target)\n            else:\n                return binarySearch(nums, k, len(nums)-1, target)","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"search-in-rotated-sorted-array"}