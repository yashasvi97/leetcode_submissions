{"id":696363230,"lang":"python3","time":"4Â weeks","timestamp":1652130222,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/696363230/","is_pending":"Not Pending","title":"Design Add and Search Words Data Structure","memory":"N/A","code":"class Node:\n    def __init__(self, val=None, terminal=False):\n        self.children = [None] * 26\n        self.val      = val\n        self.terminal = terminal\n        \nclass WordDictionary:\n\n    def __init__(self):\n        self.root = Node()\n    \n    def insert(self, word: str) -> None:\n        node = self.root\n        i = 0\n        while i < len(word):\n            x = word[i]\n            \n            ind = ord(x) - ord('a')\n            \n            if node.children[ind] is None:\n                node.children[ind] = Node(val=x)\n            node = node.children[ind]\n            \n            i += 1\n            \n        node.val = word\n        node.terminal = True\n    \n    def addWord(self, word: str) -> None:\n        self.insert(word)\n\n    def helper(self, node: Node,  word: str) -> bool:\n        if self.i == len(word):\n            if node.terminal and len(word) == len(node.val):\n                f = 1\n                for j in range(len(node.val)):\n                    if word[j] != '.':\n                        if word[j] != node.val[j]:\n                            f = 0\n                            break\n                if f:\n                    return True\n            return False\n        x = word[self.i]\n        if x == '.':\n            f = 0\n            for i in range(len(node.children)):\n                if node.children[i] is not None:\n                    self.i += 1\n                    y = self.helper(node.children[i], word)\n                    if y is False:\n                        self.i -= 1\n                    else:\n                        f = 1\n                        break\n            if f:\n                return True\n        else:\n            ind = ord(x) - ord('a')\n            if node.children[ind] is None:\n                return False\n            \n            self.i += 1\n            \n            return self.helper(node.children[ind], word)\n        \n        return False\n    \n    def search(self, word: str) -> bool:\n        self.i = 0\n        return self.helper(self.root, word)\n\n# Your WordDictionary object will be instantiated and called as such:\n# obj = WordDictionary()\n# obj.addWord(word)\n# param_2 = obj.search(word)","compare_result":"11111111100000000000000000000","title_slug":"design-add-and-search-words-data-structure"}