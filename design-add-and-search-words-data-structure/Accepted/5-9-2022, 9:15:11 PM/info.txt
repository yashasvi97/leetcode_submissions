{"id":696456745,"lang":"python3","time":"3 weeks, 6 days","timestamp":1652145311,"status_display":"Accepted","runtime":"11466 ms","url":"/submissions/detail/696456745/","is_pending":"Not Pending","title":"Design Add and Search Words Data Structure","memory":"77.9 MB","code":"class Node:\n    def __init__(self):\n        self.children = {}\n        self.terminal = False\n        \nclass WordDictionary:\n\n    def __init__(self):\n        self.root = Node()\n\n    def addWord(self, word: str) -> None:\n        node = self.root\n        for c in word:\n            if c not in node.children:\n                node.children[c] = Node()\n            node = node.children[c]\n            \n        node.terminal = True\n\n    def search(self, word: str) -> bool:\n        def dfs(j, node):\n            curr = node\n            for i in range(j, len(word)):\n                if word[i] == '.':\n                    for child in curr.children.values():\n                        if dfs(i+1, child):\n                            return True\n                    return False\n                else:\n                    # print(type(curr))\n                    if word[i] not in curr.children:\n                        return False\n                    curr = curr.children[word[i]]\n            return curr.terminal\n                    \n            \n            \n        return dfs(0, self.root)\n\n\n# Your WordDictionary object will be instantiated and called as such:\n# obj = WordDictionary()\n# obj.addWord(word)\n# param_2 = obj.search(word)","compare_result":"11111111111111111111111111111","title_slug":"design-add-and-search-words-data-structure"}