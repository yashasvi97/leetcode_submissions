{"id":693904071,"lang":"python3","time":"1Â month","timestamp":1651784380,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/693904071/","is_pending":"Not Pending","title":"Validate Binary Search Tree","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def checkleft(self, node):\n        return node.left.val < node.val\n    \n    def checkright(self, node):\n        return node.val < node.right.val\n    \n    def isValidBST(self, root: Optional[TreeNode]) -> bool:\n        if root is not None:\n            if root.left is not None and root.right is not None:\n                if self.checkleft(root) and self.checkright(root):\n                    f1 = self.isValidBST(root.left)\n                    f2 = self.isValidBST(root.right)\n                    return (f1 and f2)\n                else:\n                    return False\n            if root.left is not None and root.right is None:\n                if self.checkleft(root):\n                    f1 = self.isValidBST(root.left)\n                    return f1\n                else:\n                    return False\n            if root.left is None and root.right is not None:\n                if self.checkright(root):\n                    f2 = self.isValidBST(root.right)\n                    return f2\n                else:\n                    return False\n            if root.left is None and root.right is None:\n                return True","compare_result":"11111111111001001001111111111111111111111111111111111111111111111111111101111101","title_slug":"validate-binary-search-tree"}