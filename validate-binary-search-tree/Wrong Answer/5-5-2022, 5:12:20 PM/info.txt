{"id":693909084,"lang":"python3","time":"1Â month","timestamp":1651785140,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/693909084/","is_pending":"Not Pending","title":"Validate Binary Search Tree","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def checkleft(self, node):\n        return node.left.val < node.val\n    \n    def checkright(self, node):\n        return node.val < node.right.val\n    \n    def isValidBST(self, root: Optional[TreeNode]) -> bool:\n        discovered = []\n        def preorder(source):\n            if source is not None:\n                preorder(source.left)\n                discovered.append(source.val)\n                preorder(source.right)\n        preorder(root)\n        # print(discovered)\n        sdisc = sorted(discovered)\n        return all([x == y for (x, y) in zip(discovered, sdisc)])","compare_result":"11110001111111111011111111111111111111110111111111111111101111000011111111111001","title_slug":"validate-binary-search-tree"}