{"id":693894993,"lang":"python3","time":"1Â month","timestamp":1651783075,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/693894993/","is_pending":"Not Pending","title":"Binary Tree Level Order Traversal","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        h = {}\n        stack = [(root, 1)]\n        while len(stack) != 0:\n            (n, d) = stack.pop()\n            if d in h:\n                h[d].append(n.val)\n            else:\n                h[d] = [n.val]\n            if n.right is not None:\n                stack.append((n.right, d+1))\n            if n.left is not None:\n                stack.append((n.left, d+1))\n        depths = sorted(list(h.keys()))\n        level = []\n        for d in depths:\n            level.append(h[d])\n        return level","compare_result":"1100000000000000000000000000000000","title_slug":"binary-tree-level-order-traversal"}