{"id":694433615,"lang":"python3","time":"1Â month","timestamp":1651859551,"status_display":"Accepted","runtime":"664 ms","url":"/submissions/detail/694433615/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"88.5 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:        \n        \n#         h = {}\n#         for idx, val in enumerate(inorder):\n#             h[val] = idx\n        \n#         def helper(pre):\n#             if len(pre) > 0:\n#                 root = TreeNode(val=pre[0])\n\n#                 i = h[root.val]\n\n#                 # anything left of i (inorder) is left subtree\n#                 root.left  = helper(pre[1:i+1])\n#                 root.right = helper(pre[i+1:])\n\n#                 return root\n#             else:\n#                 return None\n        \n#         return helper(preorder)\n        if len(inorder) > 0 and len(preorder) > 0:\n            root = TreeNode(val=preorder[0])\n\n            i = 0\n            while inorder[i] != root.val:\n                i += 1\n            # anything left of i (inorder) is left subtree\n            root.left = self.buildTree(preorder[1:i+1], inorder[:i])\n            root.right = self.buildTree(preorder[i+1:], inorder[i+1:])\n\n            return root\n        else:\n            return None","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal"}