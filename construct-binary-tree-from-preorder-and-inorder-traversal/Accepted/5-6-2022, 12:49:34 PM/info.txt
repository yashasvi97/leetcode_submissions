{"id":694399882,"lang":"python3","time":"1Â month","timestamp":1651855774,"status_display":"Accepted","runtime":"459 ms","url":"/submissions/detail/694399882/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"88.6 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:\n        if len(inorder) > 0 and len(preorder) > 0:\n            root = TreeNode(val=preorder[0])\n\n            i = 0\n            while inorder[i] != root.val:\n                i += 1\n            # anything left of i (inorder) is left subtree\n            root.left = self.buildTree(preorder[1:i+1], inorder[:i])\n            root.right = self.buildTree(preorder[i+1:], inorder[i+1:])\n\n            return root\n        else:\n            return None","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal"}