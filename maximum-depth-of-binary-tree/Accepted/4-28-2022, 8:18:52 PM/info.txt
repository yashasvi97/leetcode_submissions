{"id":689378402,"lang":"python3","time":"1 month, 1 week","timestamp":1651191532,"status_display":"Accepted","runtime":"77 ms","url":"/submissions/detail/689378402/","is_pending":"Not Pending","title":"Maximum Depth of Binary Tree","memory":"15.3 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def maxDepth(self, root: Optional[TreeNode]) -> int:\n        if root is None:\n            return 0\n        else:\n            stack = []\n            \n            maxDepth = 1\n            \n            stack.append(root)\n            setattr(root, \"dist\", 1)\n            setattr(root, 'visited', False)\n            while len(stack) != 0:\n                v = stack.pop()\n                if not getattr(v, 'visited'):\n                    setattr(v, 'visited', True)\n                    c = 0\n                    for neighbor in [\"left\", \"right\"]:\n                        u = getattr(v, neighbor)\n                        if u is not None:\n                            stack.append(u)\n                            d = getattr(v, \"dist\")\n                            setattr(u, \"dist\", d + 1)\n                            setattr(u, 'visited', False)\n                        else:\n                            c += 1\n                    if c == 2:\n                        maxDepth = max([maxDepth, getattr(v, \"dist\")])\n            return maxDepth","compare_result":"111111111111111111111111111111111111111","title_slug":"maximum-depth-of-binary-tree"}