{"id":689345962,"lang":"python3","time":"1 month, 1 week","timestamp":1651185323,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/689345962/","is_pending":"Not Pending","title":"Maximum Depth of Binary Tree","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def maxDepth(self, root: Optional[TreeNode]) -> int:\n        if root is None:\n            return 0\n        else:\n            stack = []\n            visited = [False] * 10001\n            distance = [-1] * 10001\n            maxDepth = -1\n            stack.append(root)\n            distance[root.val] = 0\n            while len(stack) != 0:\n                v = stack.pop()\n                if not visited[v.val]:\n                    visited[v.val] = True\n                    for neighbor in [\"left\", \"right\"]:\n                        u = getattr(v, neighbor)\n                        if u is not None:\n                            distance[u.val] = distance[v.val] + 1\n                            maxDepth = max([maxDepth, distance[u.val]])\n                            stack.append(u)\n            return maxDepth + 1","compare_result":"111011111110110111111110000110001000000","title_slug":"maximum-depth-of-binary-tree"}