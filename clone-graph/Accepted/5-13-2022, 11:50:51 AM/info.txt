{"id":698768320,"lang":"python3","time":"3 weeks, 3 days","timestamp":1652457051,"status_display":"Accepted","runtime":"40 ms","url":"/submissions/detail/698768320/","is_pending":"Not Pending","title":"Clone Graph","memory":"14.5 MB","code":"\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val = 0, neighbors = None):\n        self.val = val\n        self.neighbors = neighbors if neighbors is not None else []\n\"\"\"\n\nclass Solution:\n    def cloneGraph(self, node: 'Node') -> 'Node':\n        if node is not None:\n            print(\"node val\", node.val)\n            \n            nodeList = [None] * 101\n            visit    = [False] * 101\n            \n            ind = node.val\n            nodeList[ind] = Node(val=ind)\n            parent = ind\n            \n            queue = []\n            for n in node.neighbors:\n                ind = n.val\n                if nodeList[ind] is None:\n                    nodeList[ind] = Node(val=ind)\n                \n                nodeList[parent].neighbors.append(nodeList[ind])\n                visit[parent] = True\n                queue.append(n)\n                \n            while len(queue) !=0 :\n                n = queue.pop(0)\n                if not visit[n.val]:\n                    if nodeList[n.val] is None:\n                        nodeList[n.val] = Node(val=n.val)\n\n                    parent = n.val\n                    print(\"parent val\", parent)\n                    for nei in n.neighbors:\n                        if nodeList[nei.val] is None:\n                            nodeList[nei.val] = Node(val=nei.val)\n\n                        nodeList[parent].neighbors.append(nodeList[nei.val])\n                        queue.append(nei)\n                    visit[parent] = True\n            \n            return nodeList[1]\n        else:\n            return None\n            ","compare_result":"1111111111111111111111","title_slug":"clone-graph"}