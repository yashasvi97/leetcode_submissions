{"id":693785270,"lang":"python3","time":"1Â month","timestamp":1651770605,"status_display":"Accepted","runtime":"134 ms","url":"/submissions/detail/693785270/","is_pending":"Not Pending","title":"Subtree of Another Tree","memory":"14.7 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:\n        def compare(nodeA, nodeB):\n            if nodeA is None or nodeB is None:\n                if (nodeA is None and nodeB is not None) or (nodeA is not None and nodeB is None):\n                    return False\n                return True\n            if nodeA.val == nodeB.val and compare(nodeA.left, nodeB.left) and compare(nodeA.right, nodeB.right):\n                return True\n            else:\n                return False\n    \n        def DFS(source, search):\n            stack = [(source, 1)]\n            f = 0\n            while len(stack) != 0:\n                (n, d) = stack.pop()\n                if n.val == search.val:\n                    if compare(n, search):\n                        f = 1\n                        break\n                if n.right is not None:\n                    stack.append((n.right, d+1))\n                if n.left is not None:\n                    stack.append((n.left, d+1))\n            if f:\n                return True\n            else:\n                return False\n        return DFS(root, subRoot)","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"subtree-of-another-tree"}