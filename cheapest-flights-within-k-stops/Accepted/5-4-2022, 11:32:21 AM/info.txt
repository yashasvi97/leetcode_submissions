{"id":693075083,"lang":"python3","time":"1Â month","timestamp":1651678341,"status_display":"Accepted","runtime":"438 ms","url":"/submissions/detail/693075083/","is_pending":"Not Pending","title":"Cheapest Flights Within K Stops","memory":"15.4 MB","code":"class Solution:\n    def findCheapestPrice(self, n: int, flights: List[List[int]], src: int, dst: int, k: int) -> int:\n        import sys\n        INF = sys.maxsize\n        # make graph\n        g = {}\n        for i in range(n):\n            g[i] = {}\n        for (f, t, p) in flights:\n            g[f][t] = p\n        \n        # construct DP array\n        costs = []\n        for i in range(n):\n            tmp = [-1]* (k+1)\n            costs.append(tmp)\n        \n        \n        # helper function to traverse the tree\n        def dfs(root, steps):\n            if steps == k+1 and root != dst:\n                return INF\n            if root == dst:\n                return 0\n            if costs[root][steps] != -1:\n                return costs[root][steps]\n            \n            min_cost = INF\n            for u in g[root]:\n                min_cost = min(min_cost, g[root][u] + dfs(u, steps+1) )\n            \n            costs[root][steps] = min_cost\n            return min_cost\n        \n        ans = dfs(src, 0)\n        #=======================================================\n        # assuming costs is filled with best costs from u to dst with at most x steps\n        if ans == INF:\n            return -1\n        else:\n            return ans","compare_result":"111111111111111111111111111111111111111111111111111","title_slug":"cheapest-flights-within-k-stops"}