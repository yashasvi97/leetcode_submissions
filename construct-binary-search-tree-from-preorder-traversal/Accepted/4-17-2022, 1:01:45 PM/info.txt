{"id":682266845,"lang":"python3","time":"1 month, 2 weeks","timestamp":1650214905,"status_display":"Accepted","runtime":"44 ms","url":"/submissions/detail/682266845/","is_pending":"Not Pending","title":"Construct Binary Search Tree from Preorder Traversal","memory":"14 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def bstFromPreorder(self, preorder: List[int]) -> Optional[TreeNode]:\n        \n        def constructBST(pre, start, end):\n            if start > end:\n                return None\n            node = TreeNode(val=pre[start])\n            i = start\n            while i <= end:\n                if pre[i] > node.val:\n                    break\n                i += 1\n            node.left = constructBST(pre, start+1, i-1)\n            \n            node.right = constructBST(pre, i, end)\n            \n            return node\n            \n        \n        root = constructBST(preorder, 0, len(preorder)-1)\n        \n        return root","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-search-tree-from-preorder-traversal"}