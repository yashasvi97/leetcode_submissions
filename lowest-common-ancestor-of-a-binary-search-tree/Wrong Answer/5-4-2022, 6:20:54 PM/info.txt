{"id":693285490,"lang":"python3","time":"1Â month","timestamp":1651702854,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/693285490/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        if root is None:\n            return root\n        if p.val < root.val and q.val < root.val:\n            return self.lowestCommonAncestor(root.left, p, q)\n        elif root.val < p.val and root.val < q.val:\n            return self.lowestCommonAncestor(root.right, p, q)\n        elif p.val < root.val and root.val < q.val:\n            return root\n        elif q.val < root.val and root.val < p.val:\n            return root\n","compare_result":"100000110110100111011111111","title_slug":"lowest-common-ancestor-of-a-binary-search-tree"}