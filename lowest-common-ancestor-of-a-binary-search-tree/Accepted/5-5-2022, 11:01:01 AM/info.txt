{"id":693716882,"lang":"python3","time":"1Â month","timestamp":1651762861,"status_display":"Accepted","runtime":"152 ms","url":"/submissions/detail/693716882/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"18.9 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        if root is not None:\n            if (p.val <= root.val and root.val <= q.val) or (q.val <= root.val and root.val <= p.val):\n                return root\n            if p.val < root.val and q.val < root.val:\n                return self.lowestCommonAncestor(root.left, p, q)\n            if root.val < p.val and root.val < q.val:\n                return self.lowestCommonAncestor(root.right, p, q)\n        else:\n            return root","compare_result":"111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-search-tree"}