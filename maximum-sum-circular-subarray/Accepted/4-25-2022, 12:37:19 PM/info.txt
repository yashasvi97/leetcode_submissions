{"id":687336063,"lang":"python3","time":"1 month, 1 week","timestamp":1650904639,"status_display":"Accepted","runtime":"625 ms","url":"/submissions/detail/687336063/","is_pending":"Not Pending","title":"Maximum Sum Circular Subarray","memory":"19.1 MB","code":"class Solution:\n    def maxSubarraySumCircular(self, nums: List[int]) -> int:\n        def kadane(arr):\n            max_so_far = arr[0]\n            currMax = arr[0]\n            for i in range(1, len(arr)):\n                currMax = max(arr[i], currMax + arr[i])\n                max_so_far = max(currMax, max_so_far)\n            return max_so_far\n        mx1 = kadane(nums)\n        neg_nums = [-1*x for x in nums]\n        mx2 = kadane(neg_nums)\n        max_wrap = -(sum(neg_nums)-mx2)\n        res = max([mx1, max_wrap])\n        if res != 0:\n            return res\n        else:\n            return mx1","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-sum-circular-subarray"}