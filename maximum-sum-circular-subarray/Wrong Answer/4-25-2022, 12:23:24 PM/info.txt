{"id":687328174,"lang":"python3","time":"1Â month, 1Â week","timestamp":1650903804,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/687328174/","is_pending":"Not Pending","title":"Maximum Sum Circular Subarray","memory":"N/A","code":"class Solution:\n    def maxSubarraySumCircular(self, nums: List[int]) -> int:\n        def max_cross(arr, l, m, h):\n            sm = 0\n            left_sum = -10000\n            for i in range(m, l-1, -1):\n                sm += arr[i]\n                if sm > left_sum:\n                    left_sum = sm\n            \n            sm = 0\n            right_sum = -10000\n            for i in range(m+1, h+1):\n                sm += arr[i]\n                if sm > right_sum:\n                    right_sum = sm\n            \n            return max([left_sum+right_sum, left_sum, right_sum])\n        \n        def max_sub_arr_util(arr, l, h):\n            if l == h:\n                return arr[l]\n            m = (l+h)//2\n            return max([max_sub_arr_util(arr, l, m), max_sub_arr_util(arr, m+1, h), max_cross(arr, l, m, h)])\n        \n                       \n        return max_sub_arr_util(nums, 0, len(nums)-1)","compare_result":"101111111011001101111111011001100001101100011101101111011001011100011100101100100011110000001101100001100111011","title_slug":"maximum-sum-circular-subarray"}