{"id":695197402,"lang":"python3","time":"4 weeks, 1 day","timestamp":1651974948,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/695197402/","is_pending":"Not Pending","title":"Serialize and Deserialize Binary Tree","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Codec:\n    def inorder(self, src, l=[]):\n        if src is not None:\n            il = self.inorder(src.left)\n            il.append(src.val)\n            il.extend(self.inorder(src.right))\n            return il\n        else:\n            return []\n    \n    def preorder(self, src, l=[]):\n        if src is not None:\n            il = [src.val]\n            il.extend(self.preorder(src.left))\n            il.extend(self.preorder(src.right))\n            return il\n        else:\n            return []\n    \n    def constructTree(self, preorder_, inorder_):\n        if len(inorder_) > 0 and len(preorder_) > 0:\n            root = TreeNode(val=preorder_[0])\n\n            i = 0\n            while inorder_[i] != root.val:\n                i += 1\n            # anything left of i (inorder) is left subtree\n            root.left = self.constructTree(preorder_[1:i+1], inorder_[:i])\n            root.right = self.constructTree(preorder_[i+1:], inorder_[i+1:])\n\n            return root\n        else:\n            return None\n            \n    def serialize(self, root):\n        \"\"\"Encodes a tree to a single string.\n        \n        :type root: TreeNode\n        :rtype: str\n        \"\"\"\n        ino = self.inorder(root)\n        # print(\"ino\", ino)\n        pre = self.preorder(root)\n        # print(\"pre\", pre)\n        s1 = '.'.join([str(x) for x in ino])\n        s2 = '.'.join([str(x) for x in pre])\n        print(s1)\n        print(s2)\n        return s1+s2\n\n    def deserialize(self, data):\n        \"\"\"Decodes your encoded data to tree.\n        \n        :type data: str\n        :rtype: TreeNode\n        \"\"\"\n        n = len(data)\n        m = n//2\n        ino = []\n        for i in range(m):\n            ino.append(int(data[i]))\n        pre = []\n        for i in range(m, n):\n            pre.append(int(data[i]))\n        \n        root = self.constructTree(pre, ino)\n        return root\n        \n\n# Your Codec object will be instantiated and called as such:\n# ser = Codec()\n# deser = Codec()\n# ans = deser.deserialize(ser.serialize(root))","compare_result":"0000000000000000000000000000000000000000000000000000","title_slug":"serialize-and-deserialize-binary-tree"}