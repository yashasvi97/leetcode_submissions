{"id":695862472,"lang":"python3","time":"4Â weeks","timestamp":1652065704,"status_display":"Accepted","runtime":"269 ms","url":"/submissions/detail/695862472/","is_pending":"Not Pending","title":"Serialize and Deserialize Binary Tree","memory":"20.2 MB","code":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Codec:\n    def preorder(self, src, s):\n        if src is not None:\n            s += (str(src.val) + \" \")\n            s += self.preorder(src.left, \"\")\n            s += self.preorder(src.right, \"\")\n        else:\n            s += \"# \"\n        return s\n    \n    def constructTree(self, order):\n        if self.index > len(order): return None\n        if order[self.index] == '#': return None\n        root = TreeNode(val=int(order[self.index]))\n        self.index += 1\n        root.left = self.constructTree(order)\n        self.index += 1\n        root.right = self.constructTree(order)\n        return root\n            \n    def serialize(self, root):\n        \"\"\"Encodes a tree to a single string.\n        \n        :type root: TreeNode\n        :rtype: str\n        \"\"\"\n        pre = self.preorder(root, \"\")\n        # print(pre)\n        return pre\n\n    def deserialize(self, data):\n        \"\"\"Decodes your encoded data to tree.\n        \n        :type data: str\n        :rtype: TreeNode\n        \"\"\"\n        self.index = 0\n        a2 = data.split(' ')[:-1]\n        # print(a2)\n        return self.constructTree(a2)\n        \n\n# Your Codec object will be instantiated and called as such:\n# ser = Codec()\n# deser = Codec()\n# ans = deser.deserialize(ser.serialize(root))","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"serialize-and-deserialize-binary-tree"}